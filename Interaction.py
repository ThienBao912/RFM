import streamlit as st
import pandas as pd
import pickle

# Load models and data
@st.cache_data
def load_data():
    df_RFM = pd.read_csv('Data/df_RFM.csv')
    df1 = pd.read_csv('Data/Products_with_Categories.csv')
    df2 = pd.read_csv('Data/Transactions.csv')
    df = pd.merge(df2, df1, on='productId', how='inner')
    df['purchase_amount'] = df['price'] * df['items']
    return df_RFM, df

df_RFM, df = load_data()

def load_model_and_scaler():
    with open("pkl/kmeans_model.pkl", "rb") as f:
        model = pickle.load(f)
    with open("pkl/scaler.pkl", "rb") as f:
        scaler = pickle.load(f)
    return model, scaler
model, scaler = load_model_and_scaler()

def cluster_name(cluster_id):
    mapping = {
        0: "üõë Churned - Kh√°ch ƒë√£ r·ªùi b·ªè",
        1: "üåü Potential - Kh√°ch ti·ªÅm nƒÉng",
        2: "üíé Engaged - Kh√°ch th∆∞·ªùng xuy√™n",
        3: "‚ö†Ô∏è At Risk - Kh√°ch c√≥ nguy c∆° r·ªùi b·ªè",
        4: "üëë VIP - Kh√°ch h√†ng cao c·∫•p"
    }
    return mapping.get(cluster_id, "Kh√¥ng x√°c ƒë·ªãnh")

st.title("Tr·∫£i nghi·ªám ph√¢n c·ª•m")

input_method = st.radio("Ch·ªçn c√°ch nh·∫≠p th√¥ng tin kh√°ch h√†ng:", 
                       ["Nh·∫≠p m√£ kh√°ch h√†ng", "Nh·∫≠p th√¥ng tin kh√°ch h√†ng v√†o slider", "T·∫£i file CSV"])

if input_method == "Nh·∫≠p m√£ kh√°ch h√†ng":
    selected_customers = st.multiselect("Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m√£ kh√°ch h√†ng:", 
                                      sorted(df_RFM['Member_number'].unique()))
    if selected_customers:
        result_segments = df_RFM[df_RFM["Member_number"].isin(selected_customers)]
        result_trans = df[df["Member_number"].isin(selected_customers)]
        
        st.success(f"‚úÖ T√¨m th·∫•y {len(result_segments)} kh√°ch h√†ng:")
        st.dataframe(result_segments)

        try:
            rfm_values = result_segments[['Recency', 'Frequency', 'Monetary']].values[0]
            cluster_label = model.predict(scaler.transform([rfm_values]))[0]
            st.success(f"‚úÖ C·ª•m kh√°ch h√†ng: **{cluster_name(cluster_label)}**")
        except Exception as e:
            st.error(f"L·ªói khi ph√¢n c·ª•m: {str(e)}")
            
        st.success(f"‚úÖ L·ªãch s·ª≠ giao d·ªãch:")
        st.dataframe(result_trans)

elif input_method == "Nh·∫≠p th√¥ng tin kh√°ch h√†ng v√†o slider":
    st.subheader("D·ª± ƒëo√°n ph√¢n c·ª•m t·ª´ c√°c gi√° tr·ªã R, F, M")
    cols = st.columns(3)
    with cols[0]:
        recency = st.slider("Recency (Ng√†y)", 0, 727, 30)
    with cols[1]:
        frequency = st.slider("S·ªë l·∫ßn mua h√†ng", 1, 36, 5)
    with cols[2]:
        monetary = st.slider("T·ªïng chi ti√™u", 10, 375, 200)
    
    if st.button("D·ª± ƒëo√°n ph√¢n c·ª•m"):
        cluster_label = model.predict(scaler.transform([[recency, frequency, monetary]]))[0]
        st.write(f"Th√¥ng tin nh·∫≠p v√†o: Recency: `{recency}`, Frequency: `{frequency}`, Monetary: `{monetary}`")
        st.success(f"‚úÖ K·∫øt qu·∫£ ph√¢n c·ª•m: **{cluster_name(cluster_label)}**")

else:  # CSV Upload
    st.subheader("T·∫£i l√™n file CSV ƒë·ªÉ ph√¢n c·ª•m")
    st.markdown("""
    **Y√™u c·∫ßu ƒë·ªãnh d·∫°ng file:**
    - File CSV c√≥ √≠t nh·∫•t 3 c·ªôt: `Recency`, `Frequency`, `Monetary`
    - C·ªôt `CustomerID` l√† t√πy ch·ªçn (n·∫øu c√≥ s·∫Ω hi·ªÉn th·ªã trong k·∫øt qu·∫£)
    """)
    
    uploaded_file = st.file_uploader("Ch·ªçn file CSV", type=["csv"])
    
    if uploaded_file is not None:
        try:
            df_uploaded = pd.read_csv(uploaded_file)
            required_cols = {"Recency", "Frequency", "Monetary"}
            
            # Check if required columns exist
            if not required_cols.issubset(df_uploaded.columns):
                missing = required_cols - set(df_uploaded.columns)
                st.error(f"Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing)}")
            else:
                # Process the file
                df_input = df_uploaded[list(required_cols)]
                scaled_input = scaler.transform(df_input)
                clusters = model.predict(scaled_input)
                
                # Prepare results
                df_result = df_uploaded.copy()
                df_result["Cluster"] = clusters
                df_result["Ph√¢n nh√≥m"] = df_result["Cluster"].apply(cluster_name)
                
                st.success("‚úÖ Ph√¢n c·ª•m th√†nh c√¥ng!")
                
                # Show results in expandable sections
                with st.expander("Xem to√†n b·ªô k·∫øt qu·∫£"):
                    st.dataframe(df_result)
                
                with st.expander("Xem chi ti·∫øt t·ª´ng ph√¢n nh√≥m"):
                    for cluster_id in sorted(df_result["Cluster"].unique()):
                        st.subheader(f"Ph√¢n nh√≥m {cluster_id}: {cluster_name(cluster_id)}")
                        st.dataframe(df_result[df_result["Cluster"] == cluster_id])
                
                # Download button
                csv = df_result.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="T·∫£i xu·ªëng k·∫øt qu·∫£",
                    data=csv,
                    file_name='RFM_clusters_result.csv',
                    mime='text/csv'
                )
                
        except Exception as e:
            st.error(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω file: {str(e)}")